services:
  db:
    image: postgres:17.6
    container_name: wiki-link-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-wiki-link-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-wiki-link-db}
    volumes:
      - wiki-link-data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USER:-wiki-link-user} -d ${POSTGRES_DB:-wiki-link-db}',
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - wiki-link-network

  bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    container_name: wiki-link-bot
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./bot:/app/bot
      - ./pyproject.toml:/app/pyproject.toml
      - ./poetry.lock:/app/poetry.lock
    restart: unless-stopped
    networks:
      - wiki-link-network
    develop:
      watch:
        - action: sync
          path: ./bot
          target: /app/bot
        - action: rebuild
          path: ./pyproject.toml
        - action: rebuild
          path: ./poetry.lock

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: wiki-link-api
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - '5000:5000'
    volumes:
      - ./api:/app/api
      - ./pyproject.toml:/app/pyproject.toml
      - ./poetry.lock:/app/poetry.lock
    restart: unless-stopped
    networks:
      - wiki-link-network
    develop:
      watch:
        - action: sync
          path: ./api
          target: /app/api
        - action: rebuild
          path: ./pyproject.toml
        - action: rebuild
          path: ./poetry.lock

networks:
  wiki-link-network:
    name: wiki-link-network
    driver: bridge

volumes:
  wiki-link-data:
    name: wiki-link-data
